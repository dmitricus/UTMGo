// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mailer.proto

/*
Package mailer is a generated protocol buffer package.
It is generated from these files:
	mailer.proto
It has these top-level messages:
	MsgRequest
	MsgReply
*/
package mailer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MsgRequest struct {
	Subject string `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	Body    string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
	To      string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
}

func (m *MsgRequest) Reset()                    { *m = MsgRequest{} }
func (m *MsgRequest) String() string            { return proto.CompactTextString(m) }
func (*MsgRequest) ProtoMessage()               {}
func (*MsgRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MsgRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *MsgRequest) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *MsgRequest) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *MsgRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type MsgReply struct {
	Sent bool `protobuf:"varint,1,opt,name=sent" json:"sent,omitempty"`
}

func (m *MsgReply) Reset()                    { *m = MsgReply{} }
func (m *MsgReply) String() string            { return proto.CompactTextString(m) }
func (*MsgReply) ProtoMessage()               {}
func (*MsgReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MsgReply) GetSent() bool {
	if m != nil {
		return m.Sent
	}
	return false
}

func init() {
	proto.RegisterType((*MsgRequest)(nil), "MsgRequest")
	proto.RegisterType((*MsgReply)(nil), "MsgReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mailer service

type MailerClient interface {
	SendInfo(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*MsgReply, error)
	SendPass(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*MsgReply, error)
	RetrievePass(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*MsgReply, error)
}

type mailerClient struct {
	cc *grpc.ClientConn
}

func NewMailerClient(cc *grpc.ClientConn) MailerClient {
	return &mailerClient{cc}
}

func (c *mailerClient) SendInfo(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := grpc.Invoke(ctx, "/Mailer/SendInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerClient) SendPass(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := grpc.Invoke(ctx, "/Mailer/SendPass", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerClient) RetrievePass(ctx context.Context, in *MsgRequest, opts ...grpc.CallOption) (*MsgReply, error) {
	out := new(MsgReply)
	err := grpc.Invoke(ctx, "/Mailer/RetrievePass", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mailer service

type MailerServer interface {
	SendInfo(context.Context, *MsgRequest) (*MsgReply, error)
	SendPass(context.Context, *MsgRequest) (*MsgReply, error)
	RetrievePass(context.Context, *MsgRequest) (*MsgReply, error)
}

func RegisterMailerServer(s *grpc.Server, srv MailerServer) {
	s.RegisterService(&_Mailer_serviceDesc, srv)
}

func _Mailer_SendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServer).SendPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mailer/SendInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServer).SendInfo(ctx, req.(*MsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailer_SendPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServer).SendPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mailer/SendPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServer).SendPass(ctx, req.(*MsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailer_RetrievePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServer).RetrievePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Mailer/RetrievePass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServer).RetrievePass(ctx, req.(*MsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mailer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Mailer",
	HandlerType: (*MailerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendInfo",
			Handler:    _Mailer_SendInfo_Handler,
		},
		{
			MethodName: "SendPass",
			Handler:    _Mailer_SendPass_Handler,
		},
		{
			MethodName: "RetrievePass",
			Handler:    _Mailer_RetrievePass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mailer.proto",
}

func init() { proto.RegisterFile("mailer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x4d, 0xcc, 0xcc,
	0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe0, 0xe2, 0xf2, 0x2d, 0x4e, 0x0f,
	0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0xe2, 0xe3, 0x62, 0x2a, 0xc9, 0x97, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x62, 0x2a, 0xc9, 0x17, 0x12, 0xe2, 0x62, 0x49, 0xce, 0x4f, 0x49, 0x95, 0x60,
	0x02, 0x8b, 0x80, 0xd9, 0x4a, 0x72, 0x5c, 0x1c, 0x60, 0x1d, 0x05, 0x39, 0x95, 0x20, 0xf9, 0xe2,
	0xd4, 0xbc, 0x12, 0xb0, 0x0e, 0x8e, 0x20, 0x30, 0xdb, 0x28, 0x82, 0x8b, 0xcd, 0x17, 0x6c, 0x83,
	0x90, 0x0a, 0x17, 0x47, 0x70, 0x6a, 0x5e, 0x4a, 0x40, 0x62, 0x71, 0xb1, 0x10, 0xb7, 0x1e, 0xc2,
	0x1a, 0x29, 0x4e, 0x3d, 0x98, 0x09, 0x4a, 0x0c, 0x42, 0x1a, 0x5c, 0x3c, 0x41, 0xa9, 0x25, 0x45,
	0x99, 0xa9, 0x65, 0xa9, 0xf8, 0x55, 0x26, 0xb1, 0x81, 0x9d, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xae, 0xbe, 0xea, 0xe1, 0xc2, 0x00, 0x00, 0x00,
}
